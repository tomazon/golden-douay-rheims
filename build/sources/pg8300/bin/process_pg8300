#! /usr/bin/env perl

use strict;
use warnings;

use Cwd qw(getcwd);
use File::Slurp;
use utf8;
use Encode;
use YAML;
use open ':encoding(utf8)';
use open ':std';
#use JSON;

#use open qw( :std :encoding(UTF-8));


my $src = 'pg8300';
my $should_cwd = "sources/$src";
my $usage = "Usage: ./bin/process_$src\n  Must be in the directory: $should_cwd\n";
my $out_dir = './out';
my $etc_dir = './etc';
my $in_file = "./downloaded/$src-images.html.utf8";


print "CWD: ". getcwd() ."\n";
die "Not in directory $should_cwd\n$usage" if getcwd() !~ m{/$should_cwd$};
die "No such file: $in_file\n$usage" if ! -f $in_file;
die "Not a directory: $out_dir\n$usage" if ! -d $out_dir;
die "Not a directory: $etc_dir\n$usage" if ! -d $etc_dir;

my $bookid_map = YAML::LoadFile("$etc_dir/pg8300_book_ids.yaml");

my %short_title = ();
my $state = '';
my $out = {};
my $chap_num = 0;
my $verse_num = 0;
my $last_verse_num = 0;
my $line_no = 0;
for my $line (read_file($in_file, { binmode => ':utf8' })) {
    $line_no++;
    $line =~ s/\s+$//;

    $line =~ s{<p>THE BOOK OF TOBIAS</p>}{<h2>THE BOOK OF TOBIAS</h2>};
    $line =~ s{<p>6;1. }{<p>6:1. };#  if $out->{book_id} eq 'EXO';
    $line =~ s{<p>4:1 }{<p>4:1. } ;#if $out->{book_id} eq 'RUT';
    # $line =~ s{<p>145:1 }{<p>145:1. } if $out->{book_id} eq 'PSA';
    # $line =~ s{<p>([123456789]):18: }{<p>$1:18. } if $out->{book_id} eq 'EXO';
    # $line =~ s{<p>(1[023456]):18: }{<p>$1:18. } if $out->{book_id} eq 'EXO';
    # $line =~ s{<p>3:18: }{<p>1:18. } if $out->{book_id} eq 'EXO';

    $line =~ s{<p>(\d+):(\d+): }{<p>$1:$2. };
    $line =~ s{<p>(\d+):(\d+) }{<p>$1:$2. };

    if ($line =~ m{^<p><a href="#(Book\d\d)".+; (\w[\w ]+)</a>}) {
        my ($anchor, $title) = ($1, $2);
        my $book_id = $bookid_map->{$anchor} || die "Can't map from $1, Stopped ";
        $short_title{$book_id} = $title;
    } elsif ($line =~ m{<a id="(Book\d\d)">}) {
        my $new_ancher = $1;
        print_book_file() if defined($out->{book_id});
        $state = 'in_book';
        $out->{book_id} = $bookid_map->{$1} || die "Can't map from $1, Stopped ";
        print "IN_BOOK: $out->{book_id}\n";
        $out->{book_short_title} = $short_title{$out->{book_id}};
    } elsif ($line =~ m{<h2>(.+)</h2>}) {
        my $title = $1;
        next if $title =~ /THE HOLY BIBLE/;
        next if $title =~ /</;
        $out->{long_title} = $title;
    } elsif ($line =~ m{<p>(([\w1-9][\w1-9 ]+\w) Chapter (\d+))</p>}) {
        (my $chap_title, my $this_title, $chap_num) = ($1,$2,$3);
        #warn "Book title missmatch: $out->{book_short_title} != $line\n" if $out->{book_short_title} ne $this_title;
        $out->{chapter}->[$chap_num]->{chapter_number} = $chap_num;
        $out->{chapter}->[$chap_num]->{chapter_title} = $chap_title;
        $state = 'in_chapter';
        $verse_num = 0;
        $last_verse_num = 0;
    } elsif ($line =~ m{<p>(\d+):(\d+)\. (\S.*\S)\s*</p>}) {
        my ($c,$v,$text) = ($1,$2,$3);
        if ($c != $chap_num) {
            warn "[$line_no] $out->{book_id}:${chap_num}:$v Chap_num hop: $c != $chap_num\n";
        } elsif ($v != ($verse_num + 1)) {
            warn "[$line_no] $out->{book_id}:${chap_num}:$v Verse_num hop\n\n";
        }
        $verse_num = $v;
        $out->{chapter}->[$c]->{verse}->{$verse_num} = $text;
        $state = 'in_verses';
    } elsif ($line =~ m{<p>(.+)</p>}) {
        my $text = $1;
        if ($state eq 'in_book') {
            if ($text eq "THE PROLOGUE") {
                $state = 'in_prolog';
            } elsif (! defined($out->{intro})) {
                $out->{intro} = $text;
            } else {
                die "Already has intro:\n  OLD: $out->{intro}\n  NEW: $text\nStopped ";
            }
        } elsif ($state eq 'in_prolog') {
            if (! defined($out->{prolog})) {
                $out->{prolog} = $text;
            } else {
                die "Already has intro:\n  OLD: $out->{prolog}\n  NEW: $text\nStopped ";
            }
            $state = 'in_book';
        } elsif ($state eq 'in_chapter') {
            die "Chapter $chap_num intro starts with number: $text\n" if $text =~ /^\d/;
            if ($text =~ /\.\.\./) {
                add_footnote($out->{chapter}->[$chap_num], $text);
            } else {
                if ($out->{book_id} eq "DAG" && $chap_num == 13){
                    if (defined($out->{chapter}->[$chap_num]->{intro})) {
                        add_footnote($out->{chapter}->[$chap_num], $text);
                        next;
                    }
                }
                push(@{$out->{chapter}->[$chap_num]->{intro}}, $text);
                my $size = int(@{$out->{chapter}->[$chap_num]->{intro}});
                if ($size > 1) {
                    print "INTRO_SIZE: $out->{book_id}:${chap_num} $size\n";
                }
            }
        }
    }

}
print_book_file() if defined($out->{book_id});

sub add_footnote {
    my ($where, $raw) = @_;
    $where->{footnotes}->{raw} = $raw;
}

sub print_book_file {
    my $book_id = $out->{book_id};
    my $out_file = "$out_dir/$book_id.yaml";

    print "    Writing: $out_file\n";
    YAML::DumpFile($out_file, $out);
    $out = {};
}
