#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use File::Copy;
use File::Slurp;
use Getopt::Long;
use IPC::Run3;
use String::Diff qw( diff );
use String::ShellQuote;
use Text::Capitalize;
use YAML;
use utf8;

use feature 'say';

require "./sources/lib/perl5/shared.pl";

my $book_order_file = './etc/book_order.yaml';
my $top_out_dir = "./library";
my $golden_out_dir = "$top_out_dir/golden-douay-rheims";

my %source_dirs = (
    'johnblood' => './sources/johnblood_haydock/out',
    'pg1581'            => './sources/pg1581/out',
    'drbo'              => './sources/drbo/out',
    'cbol'              => './sources/cbol_douay-rheims/out',
    'vulsearch'         => './sources/vulsearch_vulgate/out',
    'pg8300_info'       => './sources/pg8300/etc/by_id.yaml',
    'vscodes_count'     => './sources/vulsearch_vulgate/out_vscode_counts',
);


my $drbo_dir = $source_dirs{drbo};
my $pg1581_dir = $source_dirs{pg1581};

my @books = book_list($book_order_file, qw( OT NT ));

for my $book_id (@books) {
    my $out_file = "$golden_out_dir/$book_id.yaml";
    my $book = {
        book_id => $book_id,
        titles => {},
        chapters => {},
        intro => "",
    };
    build_chapters($book, $drbo_dir, $pg1581_dir, $book_id);
    $book->{intro} = fetch_book_field($pg1581_dir, $book_id, 'book_intro');
    $book->{titles} = get_titles(\%source_dirs, $book_id);

    YAML::DumpFile($out_file, $book);
}

copy_vulsearsh_files($source_dirs{'vulsearch'}, "$top_out_dir/vulsearch_vulgate");

###########################################################################

sub book_yaml_file {
    my ($dir, $book_id) = @_;
    "$dir/$book_id.yaml";
}

sub build_chapters {
    my ($book, $dir_a, $dir_b, $book_id) = @_;
    my $file_a = "$dir_a/$book_id.yaml";
    my $file_b = "$dir_b/$book_id.yaml";
    my $vscodes_count_file = "$source_dirs{vscodes_count}/$book_id.yaml";

    say "Processing: $book_id";

    die "No such directory: $dir_a" unless -d $dir_a;
    die "No such directory: $dir_b" unless -d $dir_b;
    die "No_such_file: $file_a\n" unless -f $file_a;
    die "No_such_file: $file_b\n" unless -f $file_b;

    my $data_a = YAML::LoadFile($file_a);
    my $data_b = YAML::LoadFile($file_b);
    my $vscodes_count = YAML::LoadFile($vscodes_count_file);

    for my $c_index (combined_keys($data_a->{chapters}, $data_b->{chapters})) {
        my $c_tag = num_to_tag('c', $book_id, $c_index);

        my $chap_a = $data_a->{chapters}->{$c_index};
        my $chap_b = $data_b->{chapters}->{$c_index};

        $book->{chapters}->{$c_index} = { 'verses' => {} };
        my $chap_out = $book->{chapters}->{$c_index};

        $chap_out->{intro} = $chap_b->{intro};

        for my $v_index (combined_keys($chap_a->{verses}, $chap_b->{verses})) {
            my $v_num = tag_to_num($v_index);
            my $v_tag = num_to_tag('v', $c_tag, $v_num);
            my $vers_a = $chap_a->{verses}->{$v_index};
            my $vers_b = $chap_b->{verses}->{$v_index};

            if (!defined($vers_a) || $vers_a eq '') {
                warn "Only in $file_b: $v_tag\n";
                next;
            }
            if (!defined($vers_b) || $vers_b eq '') {
                warn "Only in $file_a: $v_tag\n";
                next;
            }

            my ($tag_a, $v_a, $dis_a, $text_a) = split(/\s*\|\s*/, $vers_a);
            my ($tag_b, $v_b, $dis_b, $text_b) = split(/\s*\|\s*/, $vers_b);

            die "Error: tag_a & v_tag don't match: '$tag_a' != '$v_tag'\n" if $tag_a ne $v_tag;
            die "Error: tag_b & v_tag don't match: '$tag_b' != '$v_tag'\n" if $tag_b ne $v_tag;
            die "Error: v_a & v_num don't match: '$v_a' != '$v_num'\n" if $v_a ne $v_num;
            die "Error: v_b & v_num don't match: '$v_b' != '$v_num'\n" if $v_b ne $v_num;

            my $display_v = choose_display_v($v_tag, $v_num, $dis_a, $dis_b);
            my $text = choose_verse_text($v_tag, $text_a, $text_b);

            $text = apply_vscodes($text, $vscodes_count, $c_index, $v_index);

            my $entry = join(' | ', $v_tag, $v_num, $display_v, $text);
            $chap_out->{verses}->{$v_index} = $entry;
        }
    }
}

sub apply_vscodes {
    my ($text, $vscodes_count, $c_index, $v_index) = @_;
    my $counts = $vscodes_count->{chapters}->{$c_index}->{verses}->{$v_index};
    if (defined $counts) {
        #print Dumper($counts);
        $text .= '{VS:P}'  if $counts->{ending_p};
        $text .= '{VS:BR}' if $counts->{ending_br};
        $text .= '{VS:VERSE:END}' if $counts->{ending_verseend};
        $text .= '{VS:VERSE:END}{VS:P}' if $counts->{ending_verseend_p};

        $text = "{VS:VERSE:BEGIN}$text" if $counts->{beginning_versebegin};
    }

    $text

}

sub choose_display_v {
    my ($v_tag, $v_num, $dis_a, $dis_b) = @_;
    #TODO: use some logic

    $dis_b;
}

sub choose_verse_text {
    my ($v_tag, $text_a, $text_b) = @_;
    #TODO: use some logic

    $text_b;
}

sub copy_vulsearsh_files {
    my ($in_dir, $out_dir) = @_;
    print "Copying VulSearch (Vulgate) files:\n";
    for my $file (read_dir($in_dir)) {
        my $from_file = "$in_dir/$file";
        my $to_file = "$out_dir/$file";
        print "  CP $from_file  $to_file\n";
        copy($from_file, $to_file);
    }
    print "\n";
}

sub tag_to_num {
    my ($tag) = @_;
    $tag =~ s/^.+://;
    $tag =~ s/^0+//;

    $tag
}

sub get_titles {
    my ($source_dirs, $book_id) = @_;
    my $titles = {};
    my $names = {};

    for my $src (qw( cbol drbo pg1581 johnblood )) {
        my $title = fetch_book_field($source_dirs->{$src}, $book_id, 'book_title');
        if ($src eq 'pg1581' || $src eq 'johnblood') {
            $title = capitalize_title($title);
        }
        $titles->{$src} = $title;
    }
    {
        my $pg8300 = YAML::LoadFile($source_dirs->{'pg8300_info'});
        $titles->{pg8300} = $pg8300->{$book_id}->{title};
        $titles->{'pg8300_short'} = $pg8300->{$book_id}->{short};
    }
    $titles->{'cbol_abv'} = fetch_book_field($source_dirs->{'cbol'}, $book_id, 'book_abv');

    $titles
}

sub fetch_book_field {
    my ($dir, $book_id, $field) = @_;

    my $file_name = book_yaml_file($dir, $book_id);
    #say "LOADING: $file_name FIELD: $field\n";
    my $data = YAML::LoadFile($file_name);
    $data->{$field};
}

