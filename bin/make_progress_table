#! /usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use File::Slurp;
use String::Trim;
use YAML;

use feature 'say';


my @red_letter_books = (qw( MAT MRK LUK JHN ACT 1CO 2CO REV ));
my @torah_books      = (qw( GEN EXO LEV NUM DEU ));
my @ot_books         = (qw( GEN EXO LEV NUM DEU JOS JDG RUT 1SA 2SA 1KI 2KI
                            1CH 2CH EZR NEH TOB JDT ESG JOB PSA PRO ECC SNG
                            WIS SIR ISA JER LAM BAR EZK DAG HOS JOL AMO OBA
                            JON MIC NAM HAB ZEP HAG ZEC MAL 1MA 2MA ));
my @nt_books         = (qw( MAT MRK LUK JHN ACT ROM 1CO 2CO GAL
                            EPH PHP COL 1TH 2TH 1TI 2TI TIT PHM
                            HEB JAS 1PE 2PE 1JN 2JN 3JN JUD REV ));
my @all_books       = (@ot_books, @nt_books);
my @other_ot = subtract_list(\@ot_books, \@torah_books);
my @other_nt = subtract_list(\@nt_books, \@red_letter_books);

my $config = YAML::LoadFile('./etc/status.yaml');
my $info = {};

$::pgm_out .= "";
sub out {
    for my $i (@_) {
        $::pgm_out .= "$i\n";
    }
}

for my $line (<DATA>) {
    chomp($line);
    out $line;
}
for my $book_id (@all_books) {
    my $vscode_count = count_interier_vs_codes($book_id);
    my $diff_count = count_diffs($book_id);
    my $splits_count = count_diff_splits($book_id);
    my $red_count = 0;
    if (member_of($book_id, @red_letter_books)) {
        $red_count = red_letter_verses($book_id);
    }

    my $combined = $vscode_count + ($diff_count * 2)  + ($splits_count * 2) + $red_count;

    $info->{$book_id}->{diffs} = $diff_count;
    $info->{$book_id}->{splits} = $splits_count;
    $info->{$book_id}->{vscodes} = $vscode_count;
    $info->{$book_id}->{red} = $red_count;
    $info->{$book_id}->{weight} = $combined;


    #print "$combined | $book_id | $vscode_count | $diff_count\n";
}

out "## Gospel and other Red-Letter books";
out table('', 'do_red', @red_letter_books);
out "## Torah";
out table('', '', @torah_books);
out "## Other New Testament books (ordered by effort weight)";
out table('sort', '', @other_nt);
out "## Other Old Testament books (ordered by effort weight)";
out table('sort', '',  @other_ot);

#say "=============";
say $::pgm_out;

exit();


sub table {
    my ($sort, $do_red, @books) = @_;
    my $out .= gen_headers($do_red);

    if ($sort) {
        @books = (sort {$info->{$a}->{weight} <=> $info->{$b}->{weight}} @books);
    }

    for my $book_id (@books) {
        my $status = $config->{status}->{$book_id};
        my @cols = (
            $book_id,
            $info->{$book_id}->{weight},
            $info->{$book_id}->{splits},
            $info->{$book_id}->{diffs},
            $info->{$book_id}->{vscodes},
            $info->{$book_id}->{red},
        );

        for my $field (@{$config->{stati}}) {
            next if $field->{only_red} && !$do_red;
            my $name = $field->{name};
            next if $name =~ /^num_/;
            next if $name eq 'book_id';
            if (defined(my $s = $status->{$name})) {
                push(@cols, $s);
            } else {
                push(@cols, '');
            }
        }

        $out .= "| ". join(" | ", @cols) ." |\n";
    }

    $out;
}

sub gen_headers {
    my ($do_red) = @_;
    my $header_1 = '| ';
    my $header_2 = '| ';

    for my $field (@{$config->{stati}}) {
        next if $field->{only_red} && !$do_red;
        $header_1 .= $field->{title} .' | ';
        if ($field->{name} =~ /^num_/) {
            $header_2 .= ' ---: | ';
        } else {
            $header_2 .= ':---: | ';
        }
    }

    $header_1 =~ s/\//<br>/g;

    "$header_1\n$header_2\n";
}
sub subtract_list {
    my ($a, $b) = @_;
    my @out = ();

    for my $i (@{$a}) {
        push(@out,$i) unless member_of($i, @{$b});
    }

    @out;
}

sub count_interier_vs_codes {
    my ($book_id) = @_;

    my $count=0;
    my $file = "./sources/vulsearch_vulgate/out_vscode_counts/$book_id.yaml";
    for my $line (read_file($file)) {
        $count++ if $line =~ /interier/;
    }

    $count;
}

sub count_diffs {
    my ($book_id) = @_;

    return 0 if member_of($book_id, (qw( OBA )));

    my $count=0;
    my $file = "./etc/diff_sheets/$book_id.dif";
    for my $line (read_file($file)) {
        #$count++ if $line =~ / which /;
        if ($line =~ /\|\s*[A]:/) {
            $count++;
            #$count++ if $line =~ /\.\.\./;
        }
    }

    $count;
}


sub count_diff_splits {
    my ($book_id) = @_;

    return 0 if member_of($book_id, (qw( OBA )));

    my $count=0;
    my $file = "./etc/diff_sheets/$book_id.dif";
    for my $line (read_file($file)) {
        #$count++ if $line =~ / which /;
        if ($line =~ /\|\s*[A]:/) {
            $count++ if $line =~ /\.\.\./;
        }
    }

    $count;
}


sub red_letter_verses {
    my ($book_id) = @_;

    return 0 if member_of($book_id, (qw( OBA )));

    my $count=0;
    my $file = "./etc/red_letters/$book_id.yaml";
    for my $line (read_file($file)) {
        $count++ if $line =~ /^\s*\d/;
    }

    $count;
}

sub member_of {
    my ($item, @list) = @_;
    grep(/^$item$/, @list);
}

sub not_member_of {
    my ($item, @list) = @_;
    (member_of($item, @list)?0:1);
}

__DATA__

Project Status
==============

# Overview

# Manually Intensive Effort
