#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use File::Slurp;
use List::Util qw( max );
use String::Trim;
use utf8;
use YAML;

binmode *STDOUT, ':utf8';

require "./sources/lib/perl5/shared.pl";

use feature 'say';

sub issue ($);

my $usage = "Usage: $0 book_id\n";
my $args = {
    "yaml" => 0,
};

my $book_id = shift() || die $usage;


my $diff_file = "./etc/diff_sheets/$book_id.dif";
my $drbo_file = "./sources/drbo/out/$book_id.yaml";
my $pg1581_file = "./sources/pg1581/out/$book_id.yaml";

my $drbo   = YAML::LoadFile($drbo_file);
my $pg1581 = YAML::LoadFile($pg1581_file);

my $struct = {};
my $issues_count = 0;


my $ok = {
    length_diff => {
        "MAT:13:02:[1]" => 9,
        "MRK:02:15:[1]" => 6,
        "MRK:08:06:[2]" => 55,
        "LUK:23:40:[2]" => 10,
        "LUK:24:33:[1]" => 8,
        "JHN:07:31:[3]" => 12,
        "ACT:02:20:[2]" => 6,
        "ACT:24:01:[2]" => 7,
        "1CO:03:03:[2]" => 7,
        "GEN:27:34:[2]" => 6,
        "GEN:27:36:[1]" => 6,
        "GEN:45:16:[1]" => 7,
        "ROM:08:33:[1]" => 6,
        "HEB:11:09:[1]" => 26,
        "EXO:12:30:[1]" => 38,
        "EXO:18:10:[1]" => 64,
        "EXO:18:11:[3]" => 62,
        "EXO:27:10:[2]" => 10,
        "EXO:31:16:[1]" => 30,
        "EXO:31:17:[1]" => 52,
        "EXO:31:17:[2]" => 22,
        "EXO:34:27:[1]" => 6,
        "LEV:16:10:[1]" => 6,
        "LEV:26:40:[2]" => 8,
        "LEV:26:41:[1]" => 8,
        "NUM:01:42:[1]" => 9,
        "NUM:25:17:[1]" => 7,
        "PSA:17:01:[3]" => 13,
        "PSA:17:48:[1]" => 8,
        "PSA:36:01:[1]" => 27,
        "PSA:36:09:[2]" => 6,
        "PSA:68:16:[1]" => 6,
        "PSA:104:01:[1]" => 10,
        "PSA:105:01:[1]" => 10,
        "PSA:109:01:[1]" => 19,
        "PSA:117:26:[1]" => 7,
        "PSA:132:01:[1]" => 18,
        "PSA:134:01:[1]" => 10,
        "PSA:135:01:[1]" => 10,
        "PSA:137:01:[1]" => 19,
        "PSA:138:01:[1]" => 31,
        "PSA:142:01:[1]" => 51,
        "PSA:144:01:[1]" => 27,
        "PSA:146:01:[1]" => 10,
        "PSA:147:01:[1]" => 10,
        "PSA:148:01:[1]" => 10,
        "PSA:149:01:[1]" => 10,
        "PSA:150:01:[1]" => 10,
        "EPH:01:18:[2]"  => 39,
        "PHP:04:13:[1]"  => 6,
        "2TI:02:20:[1]"  => 6,
        "1KI:02:09:[1]"  => 6,
        "1KI:02:13:[2]"  => 6,
        "1KI:06:05:[3]"  => 16,
        "1KI:06:12:[1]"  => 7,
        "1KI:07:12:[2]"  => 10,
        "1KI:07:20:[1]"  => 11,
        "2KI:05:18:[3]"  => 7,
        "2KI:08:25:[1]"  => 6,
        "2KI:10:05:[1]"  => 10,
        "2KI:10:05:[2]"  => 22,
        "2KI:13:06:[1]"  => 13,
        "2KI:15:23:[1]"  => 6,
        "2KI:15:27:[1]"  => 6,
        "2KI:17:40:[1]"  => 8,
        "2KI:21:13:[1]"  => 9,
        "JDG:05:04:[1]"  => 11,
        "JDG:05:20:[1]"  => 6,
        "JDG:05:20:[2]"  => 12,
        "JDG:05:27:[2]"  => 6,
        "JDG:07:18:[1]"  => 46,
        "JDG:15:09:[1]"  => 7,
        "1MA:06:09:[1]"  => 9,
        "1MA:06:55:[3]"  => 12,
        "1MA:09:54:[1]"  => 30,
        "1SA:02:16:[2]"  => 8,
        "1SA:17:56:[1]"  => 6,
        "1SA:21:09:[2]"  => 6,
        "1SA:25:25:[1]"  => 6,
        "1SA:28:22:[2]"  => 20,
        "1SA:30:16:[1]"  => 7,
        "2MA:04:01:[1]"  => 35,
        "2MA:08:30:[3]"  => 10,
        "2MA:14:22:[1]"  => 6,
        "2MA:14:43:[1]"  => 8,
        "JOS:02:11:[1]"  => 8,
        "JOS:07:01:[1]"  => 11,
        "DAG:08:03:[1]"  => 10,
        "DAG:08:04:[1]"  => 10,
        "DAG:13:05:[1]"  => 6,
        "DAG:13:14:[1]"  => 9,
        "WIS:14:30:[1]"  => 7,
        "WIS:16:22:[1]"  => 7,
        "2CH:24:25:[1]"  => 6,
        "2CH:35:17:[1]"  => 6,
        "JOB:05:06:[1]"  => 6,
        "JOB:10:09:[1]"  => 6,
        "JOB:19:07:[1]"  => 6,
        "JER:01:13:[2]"  => 12,
        "JER:02:02:[1]"  => 18,
        "JER:03:04:[1]"  => 10,
        "JER:04:30:[1]"  => 43,
        "JER:05:05:[2]"  => 6,
        "JER:08:01:[1]"  => 31,
        "JER:08:22:[1]"  => 6,
        "JER:20:04:[1]"  => 38,
        "JER:22:28:[1]"  => 6,
        "JER:32:09:[1]"  => 10,

    },
    no_matches => {
        "MRK:08:27 pg1581" => "non-utf8 character",
        "MRK:12:14 pg1581" => "non-utf8 character",
        "ACT:08:40 pg1581" => "non-utf8 character",
        "ACT:09:30 pg1581" => "non-utf8 character",
        "ACT:10:01 pg1581" => "non-utf8 character",
        "ACT:10:24 pg1581" => "non-utf8 character",
        "ACT:11:11 pg1581" => "non-utf8 character",
        "ACT:12:19 pg1581" => "non-utf8 character",
        "ACT:18:22 pg1581" => "non-utf8 character",
        "ACT:21:08 pg1581" => "non-utf8 character",
        "ACT:21:16 pg1581" => "non-utf8 character",
        "ACT:23:23 pg1581" => "non-utf8 character",
        "ACT:23:33 pg1581" => "non-utf8 character",
        "ACT:25:01 pg1581" => "non-utf8 character",
        "ACT:25:04 pg1581" => "non-utf8 character",
        "ACT:25:06 pg1581" => "non-utf8 character",
        "ACT:25:13 pg1581" => "non-utf8 character",
    },
    start_differently => {
        "LUK:12:28[3]" => 1,
        "1CO:10:33[2]" => 1,
        "EXO:31:17[1]" => 1,
        "1KI:03:18[2]" => 1,
        "1KI:07:11[2]" => 1,
        "2KI:05:18[3]" => 1,
        "JDG:09:32[3]" => 1,
        "LUK:02:01[2]" => 1,
    },
    end_differently => {
        "ACT:02:20[2]" => 1,
        "REV:05:11[3]" => 1,
        "EXO:05:09[2]" => 1,
        "1KI:22:26[2]" => 1,
    },
};

my $last_tag = "";
my $index = 0;
my $line_num = 0;
for my $line (read_file($diff_file)) {
    $line_num++;
    trim($line);
    
    #$line =~ s/\xef\xbf\xbd/\x{00E6}/g;
    # say $line;
    # next;

    next unless $line =~ /\S/;
    if ($line =~ /^#/) {
        check_comment($line);
        next;
    }
    my @cols = split(/\s*\|\s*/, $line);
    #my ($b,$v,$c);

    if ($cols[0] =~ /^([A-Z1-4][A-Z]{2}):(\d+):(\d+)$/) {
        my ($b,$c,$v) = ($1,$2,$3);
        my $tag = bcv_tag($b,$c,$v);

        $v =~ s/^0//g;
        $c =~ s/^0//g;
        if ($cols[1] =~ s/^([A-Z]):\s*//) {
            my $letter = $1;
            my $label = $cols[1];
            my $string = $cols[2];

            $index = 0 if $tag ne $last_tag;

            if (!defined($cols[2])) {
                issue bcv2tag($book_id,$c,$v) ."$label UNDEF_STRING";
                next;
            }

            #next if !defined($string) || $string eq ''; 
            if ($string eq '') {
                issue bcv2tag($book_id,$c,$v) ."$label EMPTY_STRING";
                next;
            } elsif (!defined($string)) {
                issue bcv2tag($book_id,$c,$v) ."$label UNDEF2_STRING";
                next;
            }

            check_letter_label($diff_file, $line_num, $letter, $label);
            check_string_in_verse($b,$c,$v, $label, $string);
            put_verse_into_struct($b,$c,$v, $index, $letter, $label, $string);

            $last_tag = $tag;
        } elsif ($cols[1] eq 'which') {
           put_which_into_struct($b,$c,$v, $index, \@cols);
           $index++;
        } else {
            issue "??? $line";
        }
    } else {
        issue "ODD COL[0]:  $cols[0]";
        die "${diff_file}[$line_num]: ODD_LINE: $line\n";
    }
}

check_struct($struct, $book_id);
exit 1 if $issues_count;

YAML::Dump($struct) if $args->{yaml};

exit 0;

#=========================================================================================


sub index2num {
    my ($out) = @_;
    $out =~ s/^[vc]:0*//;
    $out
}

sub bcv2tag {
    my ($book_id, $c, $v) = @_;
    $c =~ s/^c://;
    $v =~ s/^v://;
    sprintf("%s:%02d:%02d", $book_id, $c, $v);
}


sub start_chars {
    # return $1 if $_[0] =~ /^(...)/;
    # ""
    return '^' if $_[0] =~ /^\^/;
    my $tmp = lc($_[0]);
    $tmp =~ s/\s+//g;
    $tmp =~ tr/\.\,:;//d;
    return $1 if $tmp =~ /^(......)/;
    ""
}

sub end_chars {
    return '$' if $_[0] =~ /\$$/;
    my $tmp = lc($_[0]);
    $tmp =~ s/\s+//g;
    $tmp =~ tr/\.\,:;//d;
    return $1 if $tmp =~ /(......)$/;
    ""
}

sub check_struct {
    my($struct, $book_id) = @_;

    for my $c_index (sort keys %{$struct}) {
        for my $v_index (sort keys %{$struct->{$c_index}}) {
            my $entry = $struct->{$c_index}->{$v_index};
            my $tag = $entry->{tag};
            #$tag = sprintf("%s:%02d:%02d", $book_id, index2num($c_index), index2num($v_index));
            $tag = bcv2tag(split(/:/,$tag));

            #my $comments = $entry->{comments};
            if (defined(my $comments = $entry->{comments})) {
                if ($comments->{A} !~ /\.\.\./ && $comments->{B} !~ /\.\.\./) {
                    issue "$tag COMMENTS_HAVE_NO_SEPERATOR";
                }
                my $splits_a = () = $comments->{A} =~ /\.\.\./g;
                my $splits_b = () = $comments->{B} =~ /\.\.\./g;
                my $splits = max($splits_a, $splits_b) + 1;

                my $diff_count = int(@{$entry->{diffs}});
                issue "$tag TOO_FEW_SPLITS  $diff_count < $splits" if $diff_count < $splits;
            }



            issue "${tag} has no diffs" unless $entry->{diffs};
            my $i = 0;
            for my $d (@{$entry->{diffs}}) {
                $i++;
                if (!$d->{varients}{A}) {
                    issue "${tag}[$i] has no A: entry";
                } elsif (!$d->{varients}->{B}) {
                    issue "${tag}[$i] has no B: entry";
                }
                issue "${tag}[$i] has no '1971-Tan' which" if !$d->{which}->{"1971-Tan"};

                my $a_start = start_chars($d->{varients}->{A});
                my $a_end   = end_chars($d->{varients}->{A});
                #my $len_a = length($d->{varients}->{A});
                #say "${tag}[$i] | A | $a_start | $a_end | $d->{varients}->{A} |";

                for my $let (sort keys %{$d->{varients}}) {
                    my $len_a = length($d->{varients}->{A});
                    next if $let eq 'A';
                    my $len_b = length($d->{varients}->{B});
                    my $len_diff = abs($len_a - $len_b);

                    if ($len_diff > 5) {
                        if (! $ok->{length_diff}->{"${tag}:[$i]"}) {
                            issue "${tag}:[$i] lengths differ by $len_diff";
                        }
                    }

                    next if $let eq 'A';
                    my $start = start_chars($d->{varients}->{$let});
                    my $end = end_chars($d->{varients}->{$let});

                    #say "${tag}[$i] | $let | $start | $end | $d->{varients}->{$let} |";

                    if ($start ne $a_start && $end ne $a_end) {
                        issue join(' | ',
                            "${tag}[$i]  A and $let start and finish differently",
                            $d->{varients}->{A},
                            $d->{varients}->{B},
                        );
                    } elsif ($start ne $a_start && !$ok->{start_differently}->{"${tag}[$i]"}) {
                        issue join(' | ',
                            "${tag}[$i]  A and $let start differently",
                            $d->{varients}->{A},
                            $d->{varients}->{B},
                        );
                    } elsif ($end ne $a_end && !$ok->{end_differently}->{"${tag}[$i]"}) {
                        issue join(' | ',
                            "${tag}[$i]  A and $let end differently",
                            $d->{varients}->{A},
                            $d->{varients}->{B},
                        );
                    }

                }




            }

        # TODO: check varient count >= comment splits;

        }
    }
}


sub check_comment {
    my ($comment) = @_;

    if ($comment =~ /^# ([A-Z1-4]{3}):(\d+):(\d+) \| ([AB]): (\S+)\s+\|\s+(.+?)\s+\|\s*$/) {
        my ($b,$c,$v,$let,$label,$string) = ($1,$2,$3,$4,$5,$6);
        my $c_index = "c:".num_to_3digits($c);
        my $v_index = "v:".num_to_3digits($v);
        my $tag = bcv_tag($b,$c,$v);

        $struct->{$c_index}->{$v_index}->{tag} = $tag;
        $struct->{$c_index}->{$v_index}->{comments}->{$let} = $string;
    } elsif ($comment =~ /^#\s*$/) {
        1;
    } elsif ($comment =~ /^#=+\s*$/) {
        1;
    } elsif ($comment =~ /^#########  /) {
        1;
    } elsif ($comment =~ /^#- [A-Z1-4]{3}:\d+:\d+ \|/) {
        1;
    } else {
        issue "ODD_COMMENT: $comment, stopped";
    }
}

sub put_verse_into_struct {
    my ($b,$c,$v, $index, $letter, $label, $string) = @_;
    my $c_index = "c:".num_to_3digits($c);
    my $v_index = "v:".num_to_3digits($v);
    my $tag = bcv_tag($b,$c,$v);

    $struct->{$c_index}->{$v_index}->{tag} = $tag;
    $struct->{$c_index}->{$v_index}->{diffs}->[$index]->{varients}->{$letter} = $string;
}

sub put_which_into_struct {
    my ($b,$c,$v, $index, $cols) = @_;
    my $c_index = "c:".num_to_3digits($c);
    my $v_index = "v:".num_to_3digits($v);
    my $tag = bcv_tag($b,$c,$v);

    my $cols_tag = shift(@{$cols});
    my $verb = shift(@{$cols});
    $cols_tag =~ s/:0+/:/g;

    die "ODD which tag:  '$cols_tag' != '$tag'\n" unless $cols_tag eq $tag;
    die "ODD which cols: verb = '$verb'\n" unless $verb eq 'which';

    for my $entry (@{$cols}) {
        if ($entry =~ /^([\w-]+):([A-Z_])?$/) {
            my ($tag, $choice) = ($1,$2);
            $struct->{$c_index}->{$v_index}->{diffs}->[$index]->{which}->{$tag} = $choice;
        } else {
            die "ODD which entry: ${tag}[$index]:  $entry Stopped";
        }
    }
}


sub check_string_in_verse {
    my ($b,$c, $v, $label, $string) = @_;
    my $c_index = "c:".num_to_3digits($c);
    my $v_index = "v:".num_to_3digits($v);

    my $const_label = sprintf("%-6s", $label);

    my $tag = "$b:$c:$v";
    $tag = bcv2tag($b,$c,$v);

    my $entry='';
    if ($label eq 'drbo') {
        $entry = $drbo->{chapters}->{$c_index}->{verses}->{$v_index};
    } elsif ($label eq 'pg1581') {
        $entry = $pg1581->{chapters}->{$c_index}->{verses}->{$v_index};
    } elsif ($label eq '1971-tan') {
        return;
    } elsif ($label eq '1899-murphy') {
        return;
    # } else {
    #     print ":::: $line\n";
    }

    die "$const_label $tag | NOMATCH: | $c_index $v_index | $string \n"
        unless defined($entry);

    my($e_tag, $e_chap, $e_c_display, $e_text) = split(/\s*\|\s*/, $entry);
    #say "$tag | $c_index $v_index | $e_tag | $string | $e_text\n";


    my $regex = $string;
    $regex =~ s/\?/\\?/g;
    $regex =~ s/\./\\./g;
    $regex =~ s/\(/\\(/g;
    $regex =~ s/\)/\\)/g;
    $regex =~ s/\{/\\{/g;
    $regex =~ s/\}/\\}/g;

    my $matches = () = $e_text =~ m{$regex}g;

    #say "$tag == MATCHES: $matches | $string | $e_text";

    if ($string =~ / \.\.\. /) {
        issue "$tag $const_label  NEED_TO_SPLIT | $string";
    } elsif ($matches > 1) {
        issue "$tag $const_label  MULTIPLE MATCHES OF | $string | $e_text";
    } elsif ($matches != 1) {
        if (! $ok->{no_matches}->{"$tag $const_label"}) {
            issue "$tag $const_label  NO MATCHES OF | $string | $e_text";
        }
    }



}

sub check_letter_label {
    my ($file, $line_num, $letter, $label) = @_;

    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter eq 'A' && $label ne 'drbo';
    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter eq 'B' && $label ne 'pg1581';
    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter eq 'C' && $label ne '1971-tan';
   die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter eq 'D' && $label ne '1899-murphy';

    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter ne 'A' && $label =~ /drbo/i;
    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter ne 'B' && $label =~ /pg1581/i;
    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter ne 'C' && $label =~ /1971-tan/i;
    die "${file}[$line_num]: ODD LETTER LABEL: $letter: $label\n"
        if $letter ne 'D' && $label =~ /1899-murphy/i;
}

sub bcv_tag {
    my ($b,$c,$v) = @_;

    sprintf("%3s:%d:%d", $b, $c, $v);
}

sub issue ($) {
    say $_[0];
    $issues_count++
}

