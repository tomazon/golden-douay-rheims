#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use File::Slurp;
use String::Diff qw( diff );
use String::ShellQuote;
use String::Trim;
use Term::ReadKey;
use YAML;

use feature 'say';

my $usage = "Usage: $0 book_id\n";
my $book_id = shift() || die "$usage";
my $c = shift;
my $v = shift;


my %file_path = (
    "diff_sheet"      => "./etc/diff_sheets/MAT.dif",
    "drbo_out"        => "./sources/drbo/out",
    "pg1581_out"      => "./sources/pg1581/out",
);

my %pgm_path = (
    "check_sheet" => "./bin/check_diff_sheet",
    "diff_yamldirs" => "./bin/diff_yamldirs",
);

my $diff_file = "./etc/diff_sheets/$book_id.dif";


#check_diff_sheet($book_id);

open(TTY, "</dev/tty");

while(1) {
    clear_screen();
    check_diff_sheet($book_id);
    my @stack = ();
    my $line_num = 0;
    for my $line (read_file($diff_file)) {
        $line_num++;
        trim($line);

        next unless $line =~ /\S/;
        if ($line =~ /^#/) {
            #check_comment($line);
            next;
        }
        my @cols = split(/\s*\|\s*/, $line);

        if ($cols[0] =~ /^([A-Z1-4][A-Z]{2}):(\d+):(\d+)$/) {
            my ($b,$c,$v) = ($1,$2,$3);
            my $tag = bcv_tag($b,$c,$v);

            $v =~ s/^0//g;
            $c =~ s/^0//g;

            if ($cols[1] =~ s/^([A-Z]):\s*//) {
                my $letter = $1;
                my $label = $cols[1];
                my $string = $cols[2];

                push(@stack, [$letter, $label, $string]);
            } elsif ($cols[1] eq 'which') {

                say ">>> | $cols[2] |";
                if ($cols[2] =~ /^1971-Tan:[A-D]$/) {
                    @stack = ();
                    next;
                }
                die "ERROR line $line_num: Don't see 1971-Tan:_\n" unless $cols[2] eq '1971-Tan:_';

                #print "\e[2J\e[H";
                say "--------------";
                diff_yamldirs($book_id, $c, $v);
                say "$book_id:$c:$v -- [$line_num]";

                my %seen = ();
                my $first = shift(@stack);

                $seen{$first->[0]}++;
                for my $e (@stack) {
                    my $letter = $e->[0];
                    die "\nERROR line $line_num: DUP Letter for Choice: $letter : " if $seen{$letter};
                    $seen{$letter}++;

                    say differ($first, $e);
                }

                my $choice = prompt('Which? ', (keys %seen));
                update_file($diff_file, $line_num, $choice);
                @stack = ();
                last;
            }
        }
    }
}

################################################################################
################################################################################



sub bcv_tag {
    my ($b,$c,$v) = @_;

    sprintf("%3s:%d:%d", $b, $c, $v);
}

sub check_diff_sheet {
    my ($book_id) = @_;

    say "Checking diff-sheet";
    my @cmd = ($pgm_path{'check_sheet'}, $book_id);
    run_cmd({}, @cmd);
}

sub clear_screen {
    print "\e[2J\e[H";
}

sub diff_yamldirs {
    my ($book_id, $c, $v) = @_;
    my $tag = sprintf("%02d:%02d", $c, $v);
    my @cmd = (
        $pgm_path{'diff_yamldirs'}, 
        $file_path{'drbo_out'},
        $file_path{'pg1581_out'},
        '--no-strip-punc',
        "${book_id}:${c}:${v}",
    );
    run_cmd({}, @cmd);
}

sub differ {
    my ($a, $b) = @_;
    my ($a_letter, $a_tag, $text_a) = @{$a};
    my ($b_letter, $b_tag, $text_b) = @{$b};

    # say "    ${a_letter}: $text_a";
    # say "    ${b_letter}: $text_b";

    my $diff = String::Diff::diff(($text_a,$text_b),
        remove_open  => "\e[1;41m",
        remove_close => "\e[0m",
        append_open  => "\e[1;42m",
        append_close => "\e[0m",
    );

    "    A: $diff->[0]\n    B: $diff->[1]";
}

sub prompt {
    my ($prompt, @expected) = @_;

    while () {
        print "\n$prompt";
        ReadMode "raw";
        my $key = ReadKey 0, *TTY;
        ReadMode "normal";

        $key = uc($key);
        say "";
        exit if $key eq 'Q';

        return $key if grep {/^$key$/} @expected;
    }
}

sub run_cmd {
    my ($args, @cmd) = @_;

    my $cmd_str = shell_quote(@cmd);

    say "Running: $cmd_str";
    system(@cmd);

    if ($? == -1) { # Failed to start program / error of the wait(2) system call
        die "Failed to execute '$cmd_str': $!";
    } elsif ($? & 127) { # Check for non-zero signal
        die "'$cmd_str' died with signal", ($? & 127), ($? & 128) ? 'with' : 'without', " coredump";
    } else { # No kill signal, check exit code.
        my $exit_code = $? >> 8; # This is the number you said to be 255.
        # print "'$runCmd' exited with value ", $exit_code, "\n";

        if ($exit_code == 255) {
            die("Failed to run \"$cmd_str\": $!");
        } elsif ($exit_code != 0) {
            die "\"$cmd_str\" exited with exit code: $exit_code\n";
        }
    }
}

sub update_file {
    my ($file, $line_num, $letter) = @_;
    my $index = $line_num - 1;

    my @lines = (read_file($file));
    print "--->>> $lines[$index]\n";
    $lines[$index] =~ s/\| 1971-Tan:_ \|/\| 1971-Tan:$letter \|/;
    print "--->>> $lines[$index]\n";

    write_file($file, @lines);
}
