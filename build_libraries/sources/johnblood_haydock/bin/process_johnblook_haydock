#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use Encode qw(encode decode from_to);
use File::Basename;
use File::Slurp;
use File::stat;
use HTML::Entities;
use IPC::Run3;
use POSIX qw(strftime);
use utf8;
use YAML;


# TODO:  Find intent of out/SIR.yaml [7849] / id1210.html[79] -- (<u style="font-style: italic; ">aischunteros</u><i>.</i>; 
my $input_encoding = 'iso-8859-1';
$input_encoding = 'cp-1252';

my $dir = './downloaded';
my $out_dir = './out';
my $bookmap_file = './etc/bookmap.yaml';
my $bookmap = YAML::LoadFile($bookmap_file);
my $blockquote_level = 0;

my $book={};

for my $part (qw( OT NT )) {
    my $index_file = "$dir/${part}_index.html";
    my $content = read_html_file($index_file, "Contents");

    $content =~ s{<a }{\n<a }gi;

    for my $line (split(/\n/, $content)) {
        #print "LINE: $line\n";
        if ($line =~ m{<strong>(\d+)</strong}) {
            #print "PSA: $1 -- $line\n";
            $line =~ s{&nbsp;}{};
            if ($line =~ m{<a href="(id\d+\.html)"><strong>(\d+)</strong>\s*\[([\d& ab]+)\]?\s*</a>}) {
                my ($file, $chap_num, $alt_num) = ($1,$2,$3);
                store_chapter($file, $chap_num, $alt_num);
            } else {
                die "Bad Psalm chap line: $line\n";
            }
        } elsif ($line =~ m{<strong>([^<]+)</strong}) {
            my $name = $1;
            $name =~ s{&nbsp;}{}ig;
            $name =~ s{, alias.+}{}ig;
            $name =~ s{1PETER}{1 PETER}ig;
            $name =~ s{ of }{ OF }ig;
            $name =~ s/\s*$//g;
            next if $name =~ /^\d+$/;
            next if $name =~ /Haydock/;
            next if $name =~ /TESTAMENT$/;

            if (defined($book->{book_id})) {
                write_book_file();
            }
            my $book_id = $bookmap->{$name}
                || die "No ID for book $name\n";

            print "IN: $book_id  ($name)\n";
            $book->{book_id} = $book_id;
            $book->{book_name} = $name;

        # } elsif ($book->{book_id} ne 'PSA') {
        #     1; # TMP SKIP
        } elsif ($line =~ /<a /i) {
            if ($line =~ m{<a class="NavBar" }) {
                #print "NAVBAR: $line\n";
            } elsif ($line =~ m{<a href="(id\d+\.html)">([^<]+)</a>}) {
                my ($file, $anchor) = ($1, $2);
                next if $anchor eq ']'; # Second entry for psalm 108
                if ($anchor eq 'Introduction') {
                    store_book_intro($file);
                } elsif ($anchor =~ /(\d+)/) {
                    store_chapter($file, $anchor);
                } else {
                    next if $line =~ /Preface/;
                    next if $line =~ /THE OLD TESTAMENT/;
                    next if $line =~ /Transcriber's Notes/;
                    print ">>> $anchor <<< $line\n";
                }
            } else {
                #print "??? $line\n";
            }
        }
    }
}
write_book_file() if defined($book->{book_id});

exit;

sub make_footnote_anchers {
    my ($text) = @_;
    $text =~ s/(\*+)/stars_to_vfn_ref($1)/ge;
    return($text);

    sub stars_to_vfn_ref {
        my ($stars) = @_;
        my $count = length($stars);
        my $index = $count - 1;

        "{VERSE_FOOTNOTE_INDEX_REF $index}";
    }
}

sub num_to_3digits {
    sprintf("%03d", $_[0]);
}

sub store_chapter {
    my ($file, $chapter_num, $alt_num) = @_;
    my %seen = ();
    my $state = '';
    my %verse_map = ();

    my $chap_index = "c:". num_to_3digits($chapter_num);

    #print "    C: $chapter_num $file - \n";

    $book->{chapters}->{$chap_index} = {
        'intro' => "",
        'verses' => {},
        'verse_footnotes' => {},
        'commentary' => {},
        'commentary_footnotes' => {},
        'provenance' => [],
    };
    ##$book->{chapter}->{chapter_source_file} = $file;
    my $chap = \$book->{chapters}->{$chap_index};
    my $chap_tag = "$book->{book_id}:$chapter_num";


    if ($book->{book_id} eq 'PSA') {
        $$chap->{after_verse_comment} = {};
        $$chap->{hebrew_psalm_number} = "$alt_num";
        $$chap->{greek_psalm_number} = "$chapter_num";
    }

    if (defined($book->{last_chapter})) {
        die "Chapter Hopping\n" if $chapter_num != ($book->{last_chapter} + 1);
        $book->{last_chapter}++;
    } else {
        die "First chapter isn't #1\n" if $chapter_num != 1;
        $book->{last_chapter} = 1;
    }

    $$chap->{provenance} = gen_provenance($dir, $file);

    my $contents = read_html_file("$dir/$file", "$chap_tag");
    my @lines = split(/\n/, $contents);
    my $last_vers=0;
    for my $line (@lines) {
        next if $line =~ /Previous Chapter/;
        $blockquote_level++ if $line =~ /<BLOCKQUOTE>/i;
        $blockquote_level-- if $line =~ /<\/BLOCKQUOTE>/i;

        $line =~ s{</strong><strong>}{}ig;
        if ($line =~ m{<title>\s*(.+)\s*</title>}) {
            my $title = $1;
            $title =~ s{\.$}{};
            $title =~ s{ III$}{ 3};
            if ($title =~ m{^([A-Z0-4\. ]+) - Chapter (\d+)$}) {
                my ($tmp_title, $tmp_num) = ($1,$2);
                my $tmp_full_title = $book->{book_title};
                $tmp_full_title =~ s/ FIRST / 1 /g;
                $tmp_full_title =~ s/ SECOND / 2 /g;
                $tmp_full_title =~ s/ THIRD / 3 /g;
                $tmp_full_title =~ s/ FOURTH / 4 /g;
                $tmp_full_title =~ s/ BOOK OF / /g;
                $tmp_full_title =~ s/ OF / /g;

                $tmp_full_title =~ s/^THE //;
                $tmp_full_title =~ tr/,//d;
                $tmp_full_title =~ s/ EPISTLE OF ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PETER / PETER /;
                $tmp_full_title =~ s/ EPISTLE ST. JOHN / JOHN /;

                $tmp_full_title =~ s/\.$//;
                $tmp_full_title =~ s/ THE APOSTLE TO THE / /;
                $tmp_full_title =~ s/ THE APOSTLE TO / /;

                $tmp_title =~ s/ OF / /g;

                $tmp_num = 35 if $file =~ 'id981.html' && $chapter_num == 35;
                $tmp_num =  8 if $file =~ 'id1038.html' && $chapter_num == 8;
                $tmp_num = 24 if $file =~ 'id1117.html' && $chapter_num == 24;
                $tmp_num =  3 if $file =~ 'id1129.html' && $chapter_num == 3;
                $tmp_num =  5 if $file =~ 'id715.html' && $chapter_num == 5;

                my %good_combos = (
                    "1 CORINTHIANS / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO THE CORINTHIANS." => 1,
                    "2 CORINTHIANS / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO THE CORINTHIANS." => 1,
                    '1 THESSALONIANS / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO THE THESSALONIANS.' => 1,
                    '2 THESSALONIANS / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO THE THESSALONIANS.' => 1,
                    '1 TIMOTHY / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO TIMOTHY.' => 1,
                    '2 TIMOTHY / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO TIMOTHY.' => 1,
                );

                my $tmp_combo = "$tmp_title / $tmp_full_title";

                if (!$good_combos{$tmp_combo}) {
                    die "Title missmatch: '$tmp_combo'\n" if $tmp_full_title !~ m{$tmp_title};
                }
                die "Chap Num missmatch: $tmp_num != $chapter_num\n" if $tmp_num != $chapter_num;
            } elsif ($title =~ /^Psalm (\d+)$/) {
                my $tmp = $1;
                die "$file: $chap_tag -- Psalm num mismatch: $tmp != $chapter_num.\n" if $tmp != $chapter_num;
                #print "        ::: Chap: $chapter_num\n";
            } else {
                die "Title in $file: $title\n";
            }
        }

        if ($state eq 'in_commentary' || $state eq 'in_commentary_footnotes') {
            #print "        IN_C: $line\n";
            if ($line =~ m{Bible Text.+Cross-references:}i || $line =~ m{Bible Text.+Commentary:}i) {
                #print "IS_T: $line\n";
                $seen{"text_and_ref"}++;
                $state = "in_text";
                $last_vers = 0;
            }
            if ($line =~ m{<p>(.*)</p>}) {
                my $text = $1;
                $text =~ s/^\s+//;
                $text =~ s/\s+$//;

                next if $text =~ m{<!--["' ]+-->};
                next if $text =~ m{____________};
                next unless $text =~ /\S/;
                $text =~ s{<span [^>]+>}{}ig;
                $text =~ s{</span>}{}ig;

                $text =~ s{^<strong>([Ver\. \d]+)</strong>}{$1};
                $text =~ s{^<b>([Ver\. \d\[\]\-\?]+)</b>}{$1};

                $text =~ s{^Ver\.(\S)}{Ver. $1};
                $text =~ s{^Ver\s}{Ver. };
                $text =~ s{<b[^>]*>\s*</b>}{}g;

                if ($book->{book_id} eq 'PSA') {

                    # TODO: handle PSA:9 PSA:113 & PSA:115 numbering.
                    if ($chap_tag eq 'PSA:9' || $chap_tag eq 'PSA:113') {

                    } elsif ($chap_tag eq 'PSA:115') {

                    }
                    $text =~ s{^\[Ver\.?\s+(\d+)\.\]\s+}{Ver. $1. }i;
                    if ($text =~ s/^Ver. (\d+)\. ([A-Z<"])/$2/) {
                        my $ver = $1;
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/<b[^>]*>Ver. (\d+)\.? \[?or (\d+)\.\]?<\/b>//i) {
                        my $ver = $1;
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/<strong>\[?Ver. (\d+)\.? or \[?(\d+)\\]?\.\]?<\/strong>//i) {
                        my $ver = $1;
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^\[?Ver. (\d+)-(\d+)\.?\]? ([A-Z<"])/$3/) {
                        my ($ver,$range) = ($1,$2);
                        add_item('commentary', $chap, $chap_tag, $ver, "$ver-$range", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^<b>Ver\. (\d+), (\d+)\.<\/b>//) {
                        my ($ver,$range) = ($1,$2);
                        add_item('commentary', $chap, $chap_tag, $ver, "$ver,$range", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^<strong>Ver\. (\d+)\. or (\d+)\.<\/strong>//) {
                        my ($ver,$range) = ($1,$2);
                        add_item('commentary', $chap, $chap_tag, $ver, "$ver or $range", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^<strong>\[Ver\. (\d+)\.\]<\/strong>//) {
                        my ($ver) = ($1);
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($chap_tag eq 'PSA:2' && $text =~ /^This psalm has no title/){
                        add_item('commentary', $chap, $chap_tag, 0, 'chapter', $text);
                        $last_vers = 0;
                    } elsif ($chap_tag eq 'PSA:3' && $text =~ /^Hebrew and Septuagint have literally/){
                        add_item('commentary', $chap, $chap_tag, 0, 'chapter', $text);
                        $last_vers = 0;
                    } elsif ($chap_tag eq 'PSA:46' && $text =~ /^This psalm appears to be a sequel/){
                        add_item('commentary', $chap, $chap_tag, 0, 'chapter', $text);
                        $last_vers = 0;
                    } else {
                        $text =~ s/^\s+//;
                        append_item('commentary', $chap, $chap_tag, $last_vers, $text);
                    }
                } elsif ($text =~ s/^Ver\. ([\d\[\]\-\.\? ]+) //) {
                    my $ver = $1;
                    my $range = '';
                    my $was = '';

                    if ($ver =~ /^(\d+)\.?\s*$/) {
                        $ver = $1;
                    } elsif ($ver =~ m/^(\d+)\.?\s*-+\s*(\d+)\.*$/) {
                        ($ver, $range) = ($1, $2);
                    } elsif ($ver =~ m/^(\d+)\.? ?\[(\d+)\.?\??]\.?$/) {
                        ($ver, $was) = ($1,$2);
                    } else {
                        print "        VER?: $ver\n";
                    }

                    if ($book->{book_id} ne 'EPH' && $ver < ($last_vers)) {  ## TODO: Handle eq/Dup verse labels
                        die "        HOP: $chap_tag ($file)  $ver < ($last_vers + 1)\n";
                    } else {
                        if ($ver > ($last_vers + 1)) {
                            my $range = ($last_vers + 1);
                            $range .= "-". ($ver - 1) if $range != ($ver - 1);
                        }
                        if ($$chap->{commentary}->{"v:". num_to_3digits($ver)}) {
                            print "!!! $chap_tag ($file) -- DUP ver=$ver\n";
                            $ver++;
                        }

                        add_item('commentary', $chap, $chap_tag, $ver, $range, $text);
                    }
                    $last_vers = $ver;
                } else {
                    next if $text =~ m{<strong>Bible Text & Cross-references:</strong>};
                    next if $text =~ m{<strong>Bible Text and Cross-references:</strong>};
                    next unless $text =~ /\S/;
                    my $inst = 0;
                    if ($text !~ /^Vera putant/ && $text =~ /^ver/i) {
                        my $last_vers_index = "v:". num_to_3digits($last_vers);
                        if (defined($$chap->{verses}->{$last_vers_index}) && $$chap->{verses}->{$last_vers_index} ne '') {
                            append_item('commentary', $chap, $chap_tag, $last_vers, $text);
                        } else {
                            die "        $chap_tag ($file) ANTI-DUP\n";
                        }
                    } else {
                        if ($text =~ s/^\[(\d+)\]\s+//) {
                            my $note_number = $1;
                            $state = 'in_commentary_footnotes';
                            add_item('commentary_footnotes', $chap, $chap_tag, $note_number, '', $text);
                            $last_vers = $note_number;
                        } elsif ($state eq 'in_commentary_footnotes') {
                            append_item('commentary_footnotes', $chap, $chap_tag, $last_vers, $text);
                        } else {
                            append_item('commentary', $chap, $chap_tag, $last_vers, $text);
                        }
                    }
                }
            }
        } elsif ($state eq 'in_text' && $line =~ /\S/) {

            if ($line =~ /^<p align="center"[^>]*>(.+)<\/p>\s*$/) {
                my $text = $1;
                $$chap->{intro} .= $text;
            } elsif ($line =~ /^<p[^>]*>(.+)<\/p>\s*$/) {
                my $text = $1;
                $text =~ s/^\s*<i>\s*(.*)\s*<\/i>\s*$/$1/ig;
                $text =~ s/^\s*<b>\s*(.*)\s*<\/b>\s*$/$1/ig;
                my $display = '';

                $text = make_footnote_anchers($text);

                if ($chap_tag eq 'WIS:6') {
                    $text .= ' answer.' if $text =~ /shall find what to$/;
                    $text =~ s/^answer\.$//;
                }
                if ($chap_tag eq 'PSA:9' || $chap_tag eq 'PSA:113' || $chap_tag eq 'PSA:147') {
                    if ($text =~ s/^(\d+)\((\d+)\) /$2 /) {
                        my ($alt_v, $our_v) = ($1, $2);
                        $display = "\{ALT_VERSE_NUM:START $alt_v\}$our_v\{ALT_VERSE_NUM:END\}";
                        $verse_map{$alt_v} = $our_v;
                        # TODO: apply %verse_map to commentary and footnotes. (second pass?)
                    }
                } elsif ($chap_tag eq 'PSA:115') {
                    if ($text =~ s/^(\d+)\((\d+)\) /$1 /) {
                        $display = "\{ALT_VERSE_NUM:START $2\}$1\{ALT_VERSE_NUM:END\}";
                    }
                }


                $text =~ s/34And so taking/34 And so taking/ if $chap_tag eq 'GEN:25';
                $text =~ s/9: The chief butler/9 The chief butler/ if $chap_tag eq 'GEN:40';
                $text =~ s/7: For the vineyard of the Lord/7 For the vineyard of the Lord/ if $chap_tag eq 'ISA:5';
                $text =~ s/^16 He saw rest that it was good/15 He saw rest that it was good/ if $chap_tag eq 'GEN:49';
                $text =~ s/^26 The God of thy father/25 The God of thy father/ if $chap_tag eq 'GEN:49';
                $text =~ s/^26 The second cherub/25 The second cherub/ if $chap_tag eq '1KI:6';
                #$text =~ s/// if $chap_tag eq '';

                $text =~ s/^(\d+)\{VERSE_/$1 {VERSE_/;

                if ($text =~ s/(.)\.______+$/$1/) {
                    $state = 'in_text_footnotes';
                }

                if ($text =~ /^\.?_____+$/ || $text eq '*' || $text =~ /<.+>_____+<\/.*>$/) {
                    $state = 'in_text_footnotes';
                    $last_vers = '';
                } elsif ($text =~ /_____+/) {
                    print "BAR: $chap_tag:$last_vers |$text|\n";
                } elsif ($text eq '*' || $text =~ /^\s*<!--["' ]+-->\s*$/) {
                    1;
                } elsif ($text !~ /\S/) {
                    1;
                } elsif ($text =~ s/^(\d+)\s+//) {
                    my $ver = $1;
                    add_item('verses', $chap, $chap_tag, $ver, $display, $text);
                    $last_vers = $ver;
                } else {
                    if ($last_vers == 0) {
                        add_item('verses', $chap, $chap_tag, 0, '', $text);
                    } elsif (($chap_tag eq 'PSA:9' || $chap_tag eq 'PSA:113') && $text =~ /^\[<i>(.+)<\/i>\]$/) {
                        $text = $1;
                        add_item('comment_after_verse', $chap, $chap_tag, $last_vers, '', $text);
                    } else {
                        print "A_T: $chap_tag | $last_vers | $text\n";
                        append_item('verses', $chap, $chap_tag, $last_vers, $text);
                    }
                }
            } else {
                #print "IN_T: $line\n";
            }
            #print "IN_T: $line\n";
        } elsif ($state eq 'in_text_footnotes' && $line =~ /\S/) {
            if ($line =~ /^<p>(.+)<\/p>\s*$/ ) {
                my $display = "";
                my $text = $1;
                $text =~ s/^\s*<i>\s*(.*)\s*<\/i>\s*$/$1/ig;
                $text =~ s/^\s*<b>\s*(.*)\s*<\/b>\s*$/$1/ig;
                if ($chap_tag eq 'PSA:9' || $chap_tag eq 'PSA:113') {
                    if ($text =~ s/^(\d+)\((\d+)\): /$2: /) {
                        $display = "${2}[$1]";
                    }
                } elsif ($chap_tag eq 'PSA:115') {
                    if ($text =~ s/^(\d+)\((\d+)\): /$1: /) {
                        $display = "${1}[$2]";
                    }
                }
                if ($text =~ s/^(\d+)[:\.]\s//) {
                    my $ref_no = $1;
                    add_item('verse_footnotes', $chap, $chap_tag, $ref_no, $display, $text);
                } elsif ($text eq '*' || $text =~ /^\s*<!--["' ]+-->\s*$/) {
                    1;
                } elsif ($text !~ /\S/) {
                    1;
                } elsif ($text =~ /^_______+\.?\s*$/) {
                    1;
                } else {
                    print "IN_T_FN: $chap_tag | $last_vers | $text\n";
                }

            }
        } elsif ($line =~ m{Notes?.+&.+Commen[ta]{1,3}ry}) {
            #print "        $line\n";
            #print "IS_C: $line\n";
            $seen{"notes_and_commentary"}++;
            $state = "in_commentary";
        } elsif ($line =~ m{Notes? and Commen[ta]{1,3}ry}) {
            #print "        $line\n";
            #print "IS_C: $line\n";
            $seen{"notes_and_commentary"}++;
            $state = "in_commentary";
        }
    }

    die "No Notes and Commentary\n" unless $seen{notes_and_commentary};
    die "Multiple Notes and Commentary\n" if $seen{notes_and_commentary} != 1;
    die "No Text and Ref\n" unless $seen{text_and_ref};
    die "Multiple Text and Ref\n" if $seen{text_and_ref} != 1;
    #exit;

}

sub add_item {
    my ($section, $chap, $chap_tag, $ver, $range, $text) = @_;
    my $index = num_to_3digits($ver);
    my $tag =  $ver;
    $blockquote_level=0;
    if ($section eq 'commentary') {
        $index = "v:". num_to_3digits($ver);
        if ($range eq 'title') {
            $tag = 'Title';
        } elsif ($range eq 'preface') {
            $tag = 'Preface';
        } elsif ($range eq 'chapter') {
            $$chap->{intro} = $text;
            #$tag = '';
            return();
        } elsif ($range eq 'etc') {
            $tag = "1, &c";
        } elsif ($range) {
            $tag .= "-$range";
        }
    } elsif ($section eq 'verses') {
        $tag = $range if $range;
    }
    $text =~ s/^\s+//;

    if ($section eq 'verses') {
        $index = "v:".num_to_3digits($ver);
        die "DUP_VERSE:  ${chap_tag}:$ver $text  Stopped \n" if defined($$chap->{$section}->{$index});
        $$chap->{$section}->{$index} = "${chap_tag}:$ver | $ver | $tag | $text";
    } else {
        if (!defined($$chap->{$section}->{$index})) {
            $$chap->{$section}->{$index} = [];
        }

        my @tmp = @{$$chap->{$section}->{$index}};
        my $inst = $#tmp + 1;

        $text =~ s{^\s+}{};
        $text =~ s{\s+$}{};

        $$chap->{$section}->{$index}->[$inst] = "${chap_tag}:$ver | $ver | $tag | $text";
    }

}

sub append_item {
    my ($section, $chap, $chap_tag, $ver, $text) = @_;
    #print "HAHA_APPEND: ".join('|', @_)."\n" if $chap_tag eq 'MAT:2';
    my $index = num_to_3digits($ver);

    if ($section eq 'commentary') {
        $index = "v:". num_to_3digits($ver);
        if ($text =~ s/^\[?<b>\[?Title\.?\]?<\/b>\]?\s*//) {
            add_item('commentary', $chap, $chap_tag, 0, 'title', $text);
            return;
        } elsif ($text =~ s/^\[?<b>\[?Preface\.?\]?<\/b>\]?\s*//) {
            add_item('commentary', $chap, $chap_tag, 0, 'preface', $text);
            return;
        } elsif ($ver == 0 && (grep(/^$chap_tag$/, qw( DAG:13 MAT:26 1CO:11 1CO:13 1CO:14 1CO:15 2CO:10 REV:18 REV:21 )))) {
            print "CHAPTER_INTRO: $chap_tag\n";
            add_item('commentary', $chap, $chap_tag, 0, 'chapter', $text);
            return;
        } elsif ($ver == 0 && (grep(/^$chap_tag$/,qw( JHN:8 JHN:10 ROM:11 ROM:15 1CO:9 GAL:1 )))) {
            $text =~ s{^<b>Ver. 1, &c.</b>}{};
            $text =~ s{^<b>Ver. 1. &c.</b>}{};

            add_item('commentary', $chap, $chap_tag, 1, 'etc', $text);
            return;
        }
    }

    $text =~ s/^\s+//;
    my $bq_tag='';
    $bq_tag = "{BQ:$blockquote_level}" if $blockquote_level;

    if ($section eq 'verses') {
        $index = "v:".num_to_3digits($ver);
        die "APPEND TO EMPTY VERSE: ${chap_tag}:$ver , Stopped " unless $$chap->{$section}->{$index} ne "";
        $$chap->{$section}->{$index} .= "{JOIN}${bq_tag}$text";
    } else {
        my @tmp = @{$$chap->{$section}->{$index}};
        my $inst = $#tmp;

        $$chap->{$section}->{$index}->[$inst] .= "{JOIN}${bq_tag}$text";
    }
}

sub time2iso {
    my ($time) = @_;

    strftime('%Y-%m-%dT%H:%M:%SZ', gmtime($time));
}

sub file_mtime {
    my ($file) = @_;
    my $st = stat($file) or die "No $file: $!";
    $st->mtime;
}

sub gen_provenance {
    my ($dir, $file) = @_;
    my @out = ();
    my $file_time = time2iso(file_mtime("$dir/$file"));
    my $now_time = time2iso(time());

    push(@out, "$file_time - Downloaded from https://johnblood.gitlab.io/haydock/$file");
    push(@out, "$now_time - Extracted by program $0");

    \@out;
}

sub store_book_intro {
    my ($file) = @_;
    #print "    I: $file\n";
    my $contents = read_html_file("$dir/$file", "$book->{book_id}:intro");
    my @lines = split(/\n/, $contents);
    my %seen = ();
    $book->{book_title} = 'THE PROPHECY OF DANIEL.' if $file eq 'id309.html';
    $book->{book_title} = 'THE PROPHECY OF NAHUM.' if $file eq 'id489.html';
    $book->{book_title} = 'THE PROPHECY OF HABACUC.' if $file eq 'id560.html';
    $book->{book_title} = 'THE PROPHECY OF ISAIAS.' if $file eq 'id1220.html';

    $book->{provenance} = {
        'intro' => gen_provenance($dir, $file),
    };

    for my $line (@lines) {
        if ($line =~ m{>([1234A-Z\. ]+) - Introduction}) {
            my $name = $1;
            $name =~ s/^ST. //;
            #print "I        PC: $line\n";
            if ($name ne $book->{book_name}) {
                die "Book Name mismatch: '$name' != '$book->{book_name}'\n";
            }
        } elsif ($line =~ /<p align="center">/) {
            $line =~ s{<strong>}{<b>}gi;
            $line =~ s{</strong>}{</b>}gi;

            # print "P        PC: $line\n";

            if ($line =~ m{<p align="center"><b>(.+)</b>}) {
                # print "AAA\n";
                my $text = $1;
                next if $text =~ m/Haydock's Catholic Bible Commentary/;
                next if $text =~ m/Next Chapter/;
                next if $text =~ m/>_*$<\/p>/;
                $text = 'ISAIAS' if $file eq 'id1220.html' && $text =~ m/ON THE PROPHETS\./;
                $text = 'TOBIAS' if $file eq 'id595.html'  && $text =~ m/APOCRYPHA\./;
                $text =~ s{&nbsp;}{}ig;
                $book->{book_title} .= ' ' if $book->{book_title};
                $book->{book_title} .= $text;
                $book->{book_title} =~ s{^(ST. MATTHEW) - INTRODUCTION (.+)}{THE HOLY GOSPEL OF JESUS CHRIST, ACCORDING TO $1.};
                $book->{book_title} =~ s/\. THE EPISTLE OF ST\..*$//;
                $book->{book_title} =~ s/\. ON THE CATHOLIC EPISTLES\..*//; #  if $file eq 'id258.html';
                $book->{book_title} =~ s/^TOBIAS THE/THE/;
                $book->{book_title} =~ s/^EPISTLE OF ST. PAUL/THE EPISTLE OF ST. PAUL/;
                $book->{book_title} =~ s/called the\s+SECOND/called the, SECOND/;
                $book->{book_title} =~ s/ISAIAS. ISAIAS/ISAIAS./;
                $book->{book_title} =~ s/, THE APOSTLE$/, THE APOSTLE./;

            } elsif ($line =~ m{<p align="center"><em>(.+)</em>}) {
                push(@{$book->{intro}}, $1);
            } else {
                1;print "CENTER-P: $line\n";
            }
        } elsif ($line =~ m{<p align="left">([^\d].+)</p>}) {
            push(@{$book->{intro}}, $1);
        } elsif ($line =~ m{<p>(.+)</p>}) {
            my $text = $1;
            $text =~ s{&nbsp; <!--["' ]+-->}{};
            $text =~ s{^\s*&nbsp;\s*$}{};
            next unless $text =~ /\S/;

            if ($book->{book_name} eq 'ISAIAS' && !$seen{"ISAIAS_INTRO_-_ON_THE_PROPHETS"}) {
                write_file("$out_dir/intro_-_on_the_prophets.html_body", {binmode=>':utf8'}, $text);
                $seen{"ISAIAS_INTRO_-_ON_THE_PROPHETS"}++;
            } elsif ($book->{book_name} eq 'TOBIAS' && !$seen{"TOBIAS_INTRO_-_APOCRYPHA"}) {
                write_file("$out_dir/intro_-_apocrypha.html_body", {binmode=>':utf8'}, $text);
                $seen{"ISAIAS_INTRO_-_APOCRYPHA"}++;
            } elsif ($book->{book_name} eq 'JAMES' && !$seen{"JAMES_INTRO_-_CATHOLIC_EPISTLES"}) {
                write_file("$out_dir/intro_-_catholic_epistles.html_body", {binmode=>':utf8'}, $text);
                $seen{"JAMES_INTRO_-_CATHOLIC_EPISTLES"}++;
            } else {
                push(@{$book->{intro}}, $text);
            }
        }
    }
    #exit;
}

sub write_book_file {
    my $book_id = $book->{book_id};
    my $file = "$out_dir/${book_id}.yaml";
    print "    Writing: $file\n";
    YAML::DumpFile($file, $book);
    $book = {};
}

sub make_utf8 {
    my ($content, $code_page) = @_;
    #$content = encode($content,':encoding(UTF-8)');
    from_to($content, $code_page, "UTF-8");
    $content;
}

sub tidy {
    my ($mode, $content) = @_;
    my $out = '';
    my $err = 'HI';
    my @cmd = ('tidy', '-w', '0', $mode , '-q');

    #print "RUNNING: ". join(' ', @cmd) ."\n";

    run3 (\@cmd, \$content, \$out, \$err)
       || die "Error running `tidy`: $?  / $!\n";
    if ($? == 0) {
        die "ERROR: $err\n$?, Stopped ";
    }
    return($out);
}

sub read_html_file {
    my ($file, $tag) = @_;
    my $content = '';

    #: $file\n";

    my %file_has_odd_chars = (
        'id32.html' => 1,
        'id33.html' => 1,
        'id34.html' => 1,
        'id35.html' => 1,
        'id36.html' => 1,
        'id37.html' => 1,
        'id38.html' => 1,
        'id39.html' => 1,
        'id40.html' => 1,
        'id41.html' => 1,
        'id42.html' => 1,
        'id43.html' => 1,
        'id44.html' => 1,
        'id45.html' => 1,
        'id46.html' => 1,
        'id47.html' => 1,
        'id48.html' => 1,
        'id50.html' => 1,
        'id54.html' => 1,
        'id55.html' => 1,
        'id57.html' => 1,
        'id58.html' => 1,
        'id59.html' => 1,
        'id60.html' => 1,
        'id61.html' => 1,
        'id62.html' => 1,
        'id63.html' => 1,
        'id64.html' => 1,
        'id66.html' => 1,
        'id67.html' => 1,
        'id68.html' => 1,
        'id69.html' => 1,
        'id75.html' => 1,
        'id77.html' => 1,
        'id80.html' => 1,
        'id86.html' => 1,
        'id87.html' => 1,
        'id88.html' => 1,
        'id136.html' => 1,
        'id1731.html' => 1,
    );

    my $basename = basename($file);

    if ($file_has_odd_chars{$basename}) {
        #print "ODD CHARS FILE: $file\n";
        $content = read_file($file, {binmode=>":raw"});
        $content = tidy('-win1252', $content);

        $content =~ s/&Atilde;&Dot;/&egrave;/ig;
        $content =~ s/&Atilde;&brvbar;/&aelig;/ig;
        $content =~ s/&Auml;&permil;/&aelig;/ig;
        $content =~ s/&Atilde;&sup2;/&ograve;/ig;
        $content =~ s/&Auml;&TRADE;/&aelig;/ig;
        $content =~ s/&Atilde;&cent;/&acirc;/ig;
        $content =~ s/&Atilde;&dagger;/&AElig/ig;
        $content =~ s/&Atilde;&not;/&igrave;/ig;
        $content =~ s/&Acirc;&frac12;/&frac12/ig;
        $content =~ s/&Aring;&dagger;/n/ig;
        $content =~ s/&Aring;&lsquor;/&ugrave;/ig;
        $content =~ s/&Acirc;&pound;/&pound;/ig;

        $content = make_utf8($content, 'utf-8');
        $content =~ s/&nbsp;/ /gi;
        $content = decode_entities($content);

    } else {
        $content = read_file($file, {binmode=>":raw"});
        $content = tidy('-win1252', $content);
        $content = make_utf8($content, 'cp-1252');
        $content =~ s/&nbsp;/ /gi;
        $content = decode_entities($content);
    }

    $content =~ s/&OpenCurlyQuote;/\x{2018}/gi;
    $content =~ s/&CloseCurlyQuote;/\x{2019}/gi;

    $content =~ s{ class="c\d+"}{}ig;
    $content =~ s{<span [^>]+>}{}ig;
    $content =~ s{<span>}{}ig;
    $content =~ s{</span>}{}ig;

    $content =~ s{<font [^>]+>}{}ig;
    $content =~ s{</font>}{}ig;
    $content =~ s{<p style="[^"]+">}{<p>}ig;
    $content =~ s{&amp;}{&}ig;
    $content =~ s{&nbsp;}{ }ig;

    $content =~ s{<p }{\n<p }ig;
    $content =~ s{<p>}{\n<p>}ig;
    $content =~ s{</p>}{</p>\n}ig;

    $content =~ s{<b [^>]+>}{<b>}ig;

    $content =~ s{<blockquote [^>]+>}{<BLOCKQUOTE>}ig;
    $content =~ s{<blockquote>}{\n<BLOCKQUOTE>\n}ig;
    $content =~ s{</blockquote>}{\n</BLOCKQUOTE>\n}ig;

    #$content =~ s{_________+}{}g;
    $content =~ s{<!--["' ]+-->}{}gi;
    $content =~ s{<i [^>]+>}{<i>}gi;

    if ($file =~ m{id1109.html$}) {
        $content =~ s{<strong>Bible Text & Cross-references:</strong>}{<strong>Notes & Commentary:</strong}i;
    }

    $content =~ s/Gradus templorum [\w ]+ completi erant/Gradus templorum ab infim\x{00e2} plebe completi erant/;

    $content =~ s{great stones. 32 Which being}{great stones.</p>\n<p>32 Which being} if $file =~ /id1420\.html/;
    $content =~ s{and just. 9 And they}{and just.</p>\n<p>9 And they} if $file =~ /id1027\.html/;
    #TODO: More of the ^^ based on audits of "Unexpected verse_num sequence:"

    $content = detranscode_greek($content);

    $content;
}

sub detranscode_greek {
    my ($text) = @_;

    # Based on th "Transcriber's Notes" at https://johnblood.gitlab.io/haydock/id16.html

    # The original text not infrequently includes Greek expressions spelled out in Greek letters.
    # In this transcription, because Greek letters are not included in the available webpage fonts,
    # those expressions have been transliterated into the English alphabet and put in italics and
    # underlined or prefaced by the expression, "Greek:"  The following substitution scheme has
    # been used:
    #    A for Alpha; B for Beta; G for Gamma; D for Delta; E for Epsilon; Z for Zeta;
    #    E for Eta; Th for Theta; I for Iota; K for Kappa; L for Lamda; M for Mu; N for Nu;
    #    X for Xi; O for Omicron; P for Pi; R for Rho; S for Sigma; T for Tau; U for Upsilon;
    #    Ph for Phi; Ch for Chi; Ps for Psi; O for Omega.
    # For example, where the name, Jesus, appeared spelled out in the original text in Greek
    # letters, Iota-eta-sigma-omicron-upsilon-sigma, it is transliterated in this transcription as,
    # Iesous or Greek: Iesous.

    sub markup_greek {
        my ($roman, $punc) = @_;
        my $greek = transcribe_roman_2_greek($roman);

        "{GREEK:START $roman}${greek}{GREEK:END}$punc"
    }

    # transcode greek "put in italics and underlined"
    $text =~ s/<i><u>([^<]+)<\/u>(.*?)<\/i>/markup_greek($1,$2)/ge;

    # prefaced by the expression, "Greek:"
    $text =~ s/<i>Greek:\s+(.+?)<\/i>/markup_greek($1,'')/gie;

    $text
}

sub transcribe_roman_2_greek {
    my ($text) = @_;

    # based on rules stated in https://johnblood.gitlab.io/haydock/id16.html
    #     The following substitution scheme has been used: 
    #     A for Alpha; B for Beta; G for Gamma; D for Delta; E for Epsilon; 
    #     Z for Zeta; E for Eta; Th for Theta; I for Iota; K for Kappa; 
    #     L for Lamda; M for Mu; N for Nu; X for Xi; O for Omicron; P for Pi; 
    #     R for Rho; S for Sigma; T for Tau; U for Upsilon; Ph for Phi; 
    #     Ch for Chi; Ps for Psi; O for Omega.
    # Note that 'O' has been used to encode both Omicron and Omega.

    # TODO:  Audit O or Om => Omicron or Omega

    my %lookup = (
        'A'  => "\x{0391}", # Α Alpha
        'a'  => "\x{03B1}", # α alpha
        'B'  => "\x{0392}", # Β Beta
        'b'  => "\x{03B2}", # β beta
        'G'  => "\x{0393}", # Γ Gamma
        'g'  => "\x{03B3}", # γ gamma
        'D'  => "\x{0394}", # Δ Delta
        'd'  => "\x{03B4}", # δ delta
        'E'  => "\x{0395}", # Ε Epsilon
        'e'  => "\x{03B5}", # ε epsilon
        'Z'  => "\x{0396}", # Ζ Zeta
        'z'  => "\x{03B6}", # ζ zeta
        'E'  => "\x{0397}", # Η Eta
        'e'  => "\x{03B7}", # η eta
        'Th' => "\x{0398}", # Θ Theta
        'th' => "\x{03B8}", # θ theta
        'I'  => "\x{0399}", # Ι Iota
        'i'  => "\x{03B9}", # ι iota
        'K'  => "\x{039A}", # Κ Kappa
        'k'  => "\x{03BA}", # κ kappa
        'L'  => "\x{039B}", # Λ Lambda
        'l'  => "\x{03BB}", # λ lambda
        'M'  => "\x{039C}", # Μ Mu
        'm'  => "\x{03BC}", # μ mu
        'N'  => "\x{039D}", # Ν Nu
        'n'  => "\x{03BD}", # ν nu
        'X'  => "\x{039E}", # Ξ Xi
        'x'  => "\x{03BE}", # ξ xi
        'O'  => "\x{039F}", # Ο Omicron
        'o'  => "\x{03BF}", # ο omicron
        'P'  => "\x{03A0}", # Π Pi
        'p'  => "\x{03C0}", # π pi
        'R'  => "\x{03A1}", # Ρ Rho
        'r'  => "\x{03C1}", # ρ rho
        'S'  => "\x{03A3}", # Σ Sigma
        's'  => "\x{03C3}", # σ sigma
        'T'  => "\x{03A4}", # Τ Tau
        't'  => "\x{03C4}", # τ tau
        'U'  => "\x{03A5}", # Υ Upsilon
        'u'  => "\x{03C5}", # υ upsilon
        'Ph' => "\x{03A6}", # Φ Phi
        'ph' => "\x{03C6}", # φ phi
        'Ch' => "\x{03A7}", # Χ Chi
        'ch' => "\x{03C7}", # χ chi
        'Ps' => "\x{03A8}", # Ψ Psi
        'ps' => "\x{03C8}", # ψ psi
        'Om' => "\x{03A9}", # Ω Omega
        'om' => "\x{03C9}", # ω omega
    );

    sub _by_greek_letters {
        my $A = length($a);
        my $B = length($b);

        # multi char matches before single char matches
        # ie. "Ps" is Psi not Pi-sigma

        return ($B <=> $A) if $A != $B;
        $a cmp $b;
    }

    for my $k (sort _by_greek_letters keys %lookup) {
        my $v = $lookup{$k};
        $text =~ s/$k/$v/g;
    }

    $text;
}
